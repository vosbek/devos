# DevOS Configuration
# Main configuration file for the DevOS system

# System Configuration
system:
  # Working directory for DevOS operations
  working_directory: "~/devos"
  
  # Log configuration
  logging:
    level: "INFO"
    file: "devos.log"
    max_size: "10MB"
    backup_count: 5
    format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  
  # Database configuration
  database:
    type: "sqlite"
    path: "devos.db"
    backup_enabled: true
    backup_interval: 3600  # 1 hour
  
  # Performance settings
  performance:
    max_concurrent_commands: 5
    command_timeout: 300  # 5 minutes
    memory_limit: "1GB"

# LLM Configuration
llm:
  # Default provider
  default_provider: "bedrock"
  
  # AWS Bedrock configuration
  bedrock:
    region: "us-east-1"
    models:
      primary: "anthropic.claude-3-sonnet-20240229-v1:0"
      fallback: "anthropic.claude-3-haiku-20240307-v1:0"
    max_tokens: 4000
    temperature: 0.1
    cost_tracking: true
  
  # OpenAI configuration (optional)
  openai:
    api_key: "${OPENAI_API_KEY}"
    model: "gpt-4"
    max_tokens: 4000
    temperature: 0.1
  
  # Local model configuration (optional)
  local:
    model_path: "~/models/llama-2-7b-chat"
    max_tokens: 2048
    temperature: 0.1

# Context Engine Configuration
context:
  # File monitoring
  file_monitoring:
    enabled: true
    watch_patterns:
      - "*.py"
      - "*.js"
      - "*.ts"
      - "*.java"
      - "*.cpp"
      - "*.c"
      - "*.go"
      - "*.rs"
      - "*.rb"
      - "*.php"
    ignore_patterns:
      - "*.pyc"
      - "*.log"
      - "*.tmp"
      - "node_modules/**"
      - ".git/**"
      - "__pycache__/**"
    max_file_size: "1MB"
  
  # Process monitoring
  process_monitoring:
    enabled: true
    track_cpu: true
    track_memory: true
    track_network: true
    sampling_interval: 10  # seconds
  
  # Git monitoring
  git_monitoring:
    enabled: true
    track_changes: true
    track_branches: true
    track_commits: true
    max_history: 100

# Security and Approval Configuration
security:
  # Approval system
  approval:
    enabled: true
    auto_approve_safe: true
    approval_timeout: 300  # 5 minutes
    learn_preferences: true
    require_approval_for:
      - "destructive_commands"
      - "system_modifications"
      - "network_operations"
      - "file_deletions"
  
  # Command validation
  validation:
    enabled: true
    strict_mode: false
    allowed_commands:
      - "ls"
      - "cat"
      - "grep"
      - "find"
      - "git"
      - "npm"
      - "pip"
      - "python"
      - "node"
      - "docker"
      - "kubectl"
    blocked_commands:
      - "rm -rf /"
      - "mkfs"
      - "dd if=/dev/zero"
      - ":(){ :|:& };"
  
  # Sandboxing
  sandbox:
    enabled: true
    container_runtime: "docker"
    network_isolation: true
    filesystem_isolation: true
    resource_limits:
      memory: "512MB"
      cpu: "1.0"
      timeout: 300

# API Configuration
api:
  # HTTP server settings
  host: "127.0.0.1"
  port: 8080
  cors_enabled: true
  cors_origins:
    - "http://localhost:3000"
    - "http://localhost:8080"
  
  # WebSocket settings
  websocket:
    enabled: true
    path: "/ws"
    max_connections: 100
    ping_interval: 30
    ping_timeout: 10
  
  # Authentication
  authentication:
    enabled: false  # Disabled for MVP
    method: "jwt"
    secret_key: "${AUTH_SECRET_KEY}"
    token_expiry: 3600  # 1 hour

# Enterprise Integrations
integrations:
  # Rancher/Kubernetes
  rancher:
    enabled: false
    url: "${RANCHER_URL}"
    token: "${RANCHER_TOKEN}"
    cluster_id: "${RANCHER_CLUSTER_ID}"
  
  # Jira
  jira:
    enabled: false
    url: "${JIRA_URL}"
    username: "${JIRA_USERNAME}"
    api_token: "${JIRA_API_TOKEN}"
  
  # ServiceNow
  servicenow:
    enabled: false
    instance: "${SERVICENOW_INSTANCE}"
    username: "${SERVICENOW_USERNAME}"
    password: "${SERVICENOW_PASSWORD}"
  
  # New Relic
  newrelic:
    enabled: false
    api_key: "${NEWRELIC_API_KEY}"
    account_id: "${NEWRELIC_ACCOUNT_ID}"
  
  # Splunk
  splunk:
    enabled: false
    url: "${SPLUNK_URL}"
    token: "${SPLUNK_TOKEN}"
    index: "devos"

# Monitoring and Telemetry
monitoring:
  # Metrics collection
  metrics:
    enabled: true
    port: 8081
    path: "/metrics"
    interval: 60  # seconds
  
  # Health checks
  health:
    enabled: true
    port: 8082
    path: "/health"
    checks:
      - "database"
      - "llm"
      - "context_engine"
      - "approval_system"
  
  # Distributed tracing
  tracing:
    enabled: false
    service_name: "devos"
    endpoint: "${JAEGER_ENDPOINT}"
    sample_rate: 0.1

# Development Settings
development:
  # Debug mode
  debug: false
  
  # Hot reload
  hot_reload: false
  
  # Test mode
  test_mode: false
  
  # Mock services
  mock_llm: false
  mock_approval: false
  mock_integrations: false